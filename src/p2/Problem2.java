package p2;

import java.util.HashMap;
import java.util.Map;

/*
 * Problem 2
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ..
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 *
 */
public class Problem2 {

	public static void main(String[] args) {
		Problem2 o1 = new Problem2();
		System.out.println("answer using naive recursion is " + o1.solve1());
		System.out.println("answer using DP is " + o1.solve2());
	}
	
	/*
	 * TC = O(n*2^(n))
	 */
	public int solve1() {
		int ans = 0;
		int i = 1, f = 1;
		while (f <= 4000000) {
			if (f %2 == 0) {
				ans += f;
			}
			i++;
			f = fibonacciRecusrive(i);
		}
		return ans;
	}
	
	/*
	 * TC = O(2^n)
	 */
	private int fibonacciRecusrive(int n) {
		if (n==1) {
			return 1;
		}
		if (n == 2) {
			return 2;
		}
		return fibonacciRecusrive(n-1) + fibonacciRecusrive(n-2);
	}
	
	/*
	 * TC = O(n*n)
	 */
	public int solve2() {
		int ans = 0;
		int i = 1, f = 1;
		while (f <= 4000000) {
			if (f %2 == 0) {
				ans += f;
			}
			i++;
			f = fibonacciDP(i);
		}
		return ans;
	}
	
	/*
	 * TC = O(n)
	 */
	private int fibonacciDP(int n) {
		if (n == 1)
			return 1;
		if (n == 1)
			return 2;
		
		Map fibCache = new HashMap();
		fibCache.put(1, 1);
		fibCache.put(2, 2);
		
		int ans = 0;
		for (int i=3; i<=n; i++) {
			 int value = (int) fibCache.get(i-1) + (int) fibCache.get(i-2);
			 fibCache.put(i, value);
		}
		return (int) fibCache.get(n);
	}
}
